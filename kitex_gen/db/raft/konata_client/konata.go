// Code generated by thriftgo (0.3.9). DO NOT EDIT.

package konata_client

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	Write OpType = "write"

	Read OpType = "read"

	RemoveId OpType = "remove_id"

	ErrCodeRspParseFail ErrCode = 40034

	ErrCodeCommandParseFail ErrCode = 40035

	ErrCodeMasterReplace ErrCode = 50012
)

type OpType = string

type ErrCode = int32

type BizErr struct {
	Code    ErrCode `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string  `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Repeat  bool    `thrift:"repeat,3" frugal:"3,default,bool" json:"repeat"`
}

func NewBizErr() *BizErr {
	return &BizErr{}
}

func (p *BizErr) InitDefault() {
	*p = BizErr{}
}

func (p *BizErr) GetCode() (v ErrCode) {
	if p != nil {
		return p.Code
	}
	return
}

func (p *BizErr) GetMessage() (v string) {
	if p != nil {
		return p.Message
	}
	return
}

func (p *BizErr) GetRepeat() (v bool) {
	if p != nil {
		return p.Repeat
	}
	return
}
func (p *BizErr) SetCode(val ErrCode) {
	p.Code = val
}
func (p *BizErr) SetMessage(val string) {
	p.Message = val
}
func (p *BizErr) SetRepeat(val bool) {
	p.Repeat = val
}

var fieldIDToName_BizErr = map[int16]string{
	1: "code",
	2: "message",
	3: "repeat",
}

func (p *BizErr) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizErr[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizErr) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}
func (p *BizErr) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}
func (p *BizErr) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Repeat = v
	}
	return nil
}

func (p *BizErr) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizErr"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizErr) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizErr) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BizErr) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("repeat", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Repeat); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BizErr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizErr(%+v)", *p)

}

func (p *BizErr) DeepEqual(ano *BizErr) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Repeat) {
		return false
	}
	return true
}

func (p *BizErr) Field1DeepEqual(src ErrCode) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BizErr) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *BizErr) Field3DeepEqual(src bool) bool {

	if p.Repeat != src {
		return false
	}
	return true
}

type Command struct {
	ReqId string `thrift:"req_id,1" frugal:"1,default,string" json:"req_id"`
	Msg   string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewCommand() *Command {
	return &Command{}
}

func (p *Command) InitDefault() {
	*p = Command{}
}

func (p *Command) GetReqId() (v string) {
	if p != nil {
		return p.ReqId
	}
	return
}

func (p *Command) GetMsg() (v string) {
	if p != nil {
		return p.Msg
	}
	return
}
func (p *Command) SetReqId(val string) {
	p.ReqId = val
}
func (p *Command) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_Command = map[int16]string{
	1: "req_id",
	2: "msg",
}

func (p *Command) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Command[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Command) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReqId = v
	}
	return nil
}
func (p *Command) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *Command) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Command"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Command) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReqId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Command) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Command) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Command(%+v)", *p)

}

func (p *Command) DeepEqual(ano *Command) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ReqId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *Command) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ReqId, src) != 0 {
		return false
	}
	return true
}
func (p *Command) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type GetArgs_ struct {
	ReqId   string `thrift:"req_id,1" frugal:"1,default,string" json:"req_id"`
	Command string `thrift:"command,2" frugal:"2,default,string" json:"command"`
	Op      OpType `thrift:"op,3" frugal:"3,default,string" json:"op"`
}

func NewGetArgs_() *GetArgs_ {
	return &GetArgs_{}
}

func (p *GetArgs_) InitDefault() {
	*p = GetArgs_{}
}

func (p *GetArgs_) GetReqId() (v string) {
	if p != nil {
		return p.ReqId
	}
	return
}

func (p *GetArgs_) GetCommand() (v string) {
	if p != nil {
		return p.Command
	}
	return
}

func (p *GetArgs_) GetOp() (v OpType) {
	if p != nil {
		return p.Op
	}
	return
}
func (p *GetArgs_) SetReqId(val string) {
	p.ReqId = val
}
func (p *GetArgs_) SetCommand(val string) {
	p.Command = val
}
func (p *GetArgs_) SetOp(val OpType) {
	p.Op = val
}

var fieldIDToName_GetArgs_ = map[int16]string{
	1: "req_id",
	2: "command",
	3: "op",
}

func (p *GetArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetArgs_) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReqId = v
	}
	return nil
}
func (p *GetArgs_) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Command = v
	}
	return nil
}
func (p *GetArgs_) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Op = v
	}
	return nil
}

func (p *GetArgs_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReqId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("command", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Command); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("op", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Op); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetArgs_(%+v)", *p)

}

func (p *GetArgs_) DeepEqual(ano *GetArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ReqId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Command) {
		return false
	}
	if !p.Field3DeepEqual(ano.Op) {
		return false
	}
	return true
}

func (p *GetArgs_) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ReqId, src) != 0 {
		return false
	}
	return true
}
func (p *GetArgs_) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Command, src) != 0 {
		return false
	}
	return true
}
func (p *GetArgs_) Field3DeepEqual(src OpType) bool {

	if strings.Compare(p.Op, src) != 0 {
		return false
	}
	return true
}

type BaseReply struct {
	Addr string `thrift:"Addr,1" frugal:"1,default,string" json:"Addr"`
}

func NewBaseReply() *BaseReply {
	return &BaseReply{}
}

func (p *BaseReply) InitDefault() {
	*p = BaseReply{}
}

func (p *BaseReply) GetAddr() (v string) {
	if p != nil {
		return p.Addr
	}
	return
}
func (p *BaseReply) SetAddr(val string) {
	p.Addr = val
}

var fieldIDToName_BaseReply = map[int16]string{
	1: "Addr",
}

func (p *BaseReply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BaseReply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BaseReply) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Addr = v
	}
	return nil
}

func (p *BaseReply) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BaseReply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BaseReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Addr", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Addr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BaseReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseReply(%+v)", *p)

}

func (p *BaseReply) DeepEqual(ano *BaseReply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Addr) {
		return false
	}
	return true
}

func (p *BaseReply) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Addr, src) != 0 {
		return false
	}
	return true
}

type Reply struct {
	Value string     `thrift:"value,1" frugal:"1,default,string" json:"value"`
	Error *BizErr    `thrift:"error,2" frugal:"2,default,BizErr" json:"error"`
	Base  *BaseReply `thrift:"base,255" frugal:"255,default,BaseReply" json:"base"`
}

func NewReply() *Reply {
	return &Reply{}
}

func (p *Reply) InitDefault() {
	*p = Reply{}
}

func (p *Reply) GetValue() (v string) {
	if p != nil {
		return p.Value
	}
	return
}

var Reply_Error_DEFAULT *BizErr

func (p *Reply) GetError() (v *BizErr) {
	if p == nil {
		return
	}
	if !p.IsSetError() {
		return Reply_Error_DEFAULT
	}
	return p.Error
}

var Reply_Base_DEFAULT *BaseReply

func (p *Reply) GetBase() (v *BaseReply) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return Reply_Base_DEFAULT
	}
	return p.Base
}
func (p *Reply) SetValue(val string) {
	p.Value = val
}
func (p *Reply) SetError(val *BizErr) {
	p.Error = val
}
func (p *Reply) SetBase(val *BaseReply) {
	p.Base = val
}

var fieldIDToName_Reply = map[int16]string{
	1:   "value",
	2:   "error",
	255: "base",
}

func (p *Reply) IsSetError() bool {
	return p.Error != nil
}

func (p *Reply) IsSetBase() bool {
	return p.Base != nil
}

func (p *Reply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Reply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Reply) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Value = v
	}
	return nil
}
func (p *Reply) ReadField2(iprot thrift.TProtocol) error {
	p.Error = NewBizErr()
	if err := p.Error.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *Reply) ReadField255(iprot thrift.TProtocol) error {
	p.Base = NewBaseReply()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Reply) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Reply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Reply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Reply) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Error.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Reply) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *Reply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Reply(%+v)", *p)

}

func (p *Reply) DeepEqual(ano *Reply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	if !p.Field2DeepEqual(ano.Error) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *Reply) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}
func (p *Reply) Field2DeepEqual(src *BizErr) bool {

	if !p.Error.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Reply) Field255DeepEqual(src *BaseReply) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type PutAppendArgs_ struct {
	ReqId   string `thrift:"req_id,1" frugal:"1,default,string" json:"req_id"`
	Command string `thrift:"command,2" frugal:"2,default,string" json:"command"`
	Op      OpType `thrift:"op,3" frugal:"3,default,string" json:"op"`
}

func NewPutAppendArgs_() *PutAppendArgs_ {
	return &PutAppendArgs_{}
}

func (p *PutAppendArgs_) InitDefault() {
	*p = PutAppendArgs_{}
}

func (p *PutAppendArgs_) GetReqId() (v string) {
	if p != nil {
		return p.ReqId
	}
	return
}

func (p *PutAppendArgs_) GetCommand() (v string) {
	if p != nil {
		return p.Command
	}
	return
}

func (p *PutAppendArgs_) GetOp() (v OpType) {
	if p != nil {
		return p.Op
	}
	return
}
func (p *PutAppendArgs_) SetReqId(val string) {
	p.ReqId = val
}
func (p *PutAppendArgs_) SetCommand(val string) {
	p.Command = val
}
func (p *PutAppendArgs_) SetOp(val OpType) {
	p.Op = val
}

var fieldIDToName_PutAppendArgs_ = map[int16]string{
	1: "req_id",
	2: "command",
	3: "op",
}

func (p *PutAppendArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PutAppendArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PutAppendArgs_) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReqId = v
	}
	return nil
}
func (p *PutAppendArgs_) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Command = v
	}
	return nil
}
func (p *PutAppendArgs_) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Op = v
	}
	return nil
}

func (p *PutAppendArgs_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutAppendArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PutAppendArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReqId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PutAppendArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("command", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Command); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PutAppendArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("op", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Op); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PutAppendArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutAppendArgs_(%+v)", *p)

}

func (p *PutAppendArgs_) DeepEqual(ano *PutAppendArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ReqId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Command) {
		return false
	}
	if !p.Field3DeepEqual(ano.Op) {
		return false
	}
	return true
}

func (p *PutAppendArgs_) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ReqId, src) != 0 {
		return false
	}
	return true
}
func (p *PutAppendArgs_) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Command, src) != 0 {
		return false
	}
	return true
}
func (p *PutAppendArgs_) Field3DeepEqual(src OpType) bool {

	if strings.Compare(p.Op, src) != 0 {
		return false
	}
	return true
}

type KonataService interface {
	Get(ctx context.Context, args_ *GetArgs_) (r *Reply, err error)

	PutAppend(ctx context.Context, args_ *PutAppendArgs_) (r *Reply, err error)

	RemoveReqId(ctx context.Context, args_ *GetArgs_) (r *Reply, err error)
}

type KonataServiceClient struct {
	c thrift.TClient
}

func NewKonataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *KonataServiceClient {
	return &KonataServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewKonataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *KonataServiceClient {
	return &KonataServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewKonataServiceClient(c thrift.TClient) *KonataServiceClient {
	return &KonataServiceClient{
		c: c,
	}
}

func (p *KonataServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *KonataServiceClient) Get(ctx context.Context, args_ *GetArgs_) (r *Reply, err error) {
	var _args KonataServiceGetArgs
	_args.Args_ = args_
	var _result KonataServiceGetResult
	if err = p.Client_().Call(ctx, "Get", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *KonataServiceClient) PutAppend(ctx context.Context, args_ *PutAppendArgs_) (r *Reply, err error) {
	var _args KonataServicePutAppendArgs
	_args.Args_ = args_
	var _result KonataServicePutAppendResult
	if err = p.Client_().Call(ctx, "PutAppend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *KonataServiceClient) RemoveReqId(ctx context.Context, args_ *GetArgs_) (r *Reply, err error) {
	var _args KonataServiceRemoveReqIdArgs
	_args.Args_ = args_
	var _result KonataServiceRemoveReqIdResult
	if err = p.Client_().Call(ctx, "RemoveReqId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type KonataServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      KonataService
}

func (p *KonataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *KonataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *KonataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewKonataServiceProcessor(handler KonataService) *KonataServiceProcessor {
	self := &KonataServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Get", &konataServiceProcessorGet{handler: handler})
	self.AddToProcessorMap("PutAppend", &konataServiceProcessorPutAppend{handler: handler})
	self.AddToProcessorMap("RemoveReqId", &konataServiceProcessorRemoveReqId{handler: handler})
	return self
}
func (p *KonataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type konataServiceProcessorGet struct {
	handler KonataService
}

func (p *konataServiceProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KonataServiceGetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := KonataServiceGetResult{}
	var retval *Reply
	if retval, err2 = p.handler.Get(ctx, args.Args_); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Get: "+err2.Error())
		oprot.WriteMessageBegin("Get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type konataServiceProcessorPutAppend struct {
	handler KonataService
}

func (p *konataServiceProcessorPutAppend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KonataServicePutAppendArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PutAppend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := KonataServicePutAppendResult{}
	var retval *Reply
	if retval, err2 = p.handler.PutAppend(ctx, args.Args_); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PutAppend: "+err2.Error())
		oprot.WriteMessageBegin("PutAppend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PutAppend", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type konataServiceProcessorRemoveReqId struct {
	handler KonataService
}

func (p *konataServiceProcessorRemoveReqId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KonataServiceRemoveReqIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RemoveReqId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := KonataServiceRemoveReqIdResult{}
	var retval *Reply
	if retval, err2 = p.handler.RemoveReqId(ctx, args.Args_); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveReqId: "+err2.Error())
		oprot.WriteMessageBegin("RemoveReqId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RemoveReqId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type KonataServiceGetArgs struct {
	Args_ *GetArgs_ `thrift:"args,1" frugal:"1,default,GetArgs_" json:"args"`
}

func NewKonataServiceGetArgs() *KonataServiceGetArgs {
	return &KonataServiceGetArgs{}
}

func (p *KonataServiceGetArgs) InitDefault() {
	*p = KonataServiceGetArgs{}
}

var KonataServiceGetArgs_Args__DEFAULT *GetArgs_

func (p *KonataServiceGetArgs) GetArgs_() (v *GetArgs_) {
	if p == nil {
		return
	}
	if !p.IsSetArgs_() {
		return KonataServiceGetArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *KonataServiceGetArgs) SetArgs_(val *GetArgs_) {
	p.Args_ = val
}

var fieldIDToName_KonataServiceGetArgs = map[int16]string{
	1: "args",
}

func (p *KonataServiceGetArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *KonataServiceGetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KonataServiceGetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KonataServiceGetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Args_ = NewGetArgs_()
	if err := p.Args_.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *KonataServiceGetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Get_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KonataServiceGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("args", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Args_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *KonataServiceGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KonataServiceGetArgs(%+v)", *p)

}

func (p *KonataServiceGetArgs) DeepEqual(ano *KonataServiceGetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Args_) {
		return false
	}
	return true
}

func (p *KonataServiceGetArgs) Field1DeepEqual(src *GetArgs_) bool {

	if !p.Args_.DeepEqual(src) {
		return false
	}
	return true
}

type KonataServiceGetResult struct {
	Success *Reply `thrift:"success,0,optional" frugal:"0,optional,Reply" json:"success,omitempty"`
}

func NewKonataServiceGetResult() *KonataServiceGetResult {
	return &KonataServiceGetResult{}
}

func (p *KonataServiceGetResult) InitDefault() {
	*p = KonataServiceGetResult{}
}

var KonataServiceGetResult_Success_DEFAULT *Reply

func (p *KonataServiceGetResult) GetSuccess() (v *Reply) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return KonataServiceGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *KonataServiceGetResult) SetSuccess(x interface{}) {
	p.Success = x.(*Reply)
}

var fieldIDToName_KonataServiceGetResult = map[int16]string{
	0: "success",
}

func (p *KonataServiceGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KonataServiceGetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KonataServiceGetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KonataServiceGetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewReply()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *KonataServiceGetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Get_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KonataServiceGetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *KonataServiceGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KonataServiceGetResult(%+v)", *p)

}

func (p *KonataServiceGetResult) DeepEqual(ano *KonataServiceGetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *KonataServiceGetResult) Field0DeepEqual(src *Reply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type KonataServicePutAppendArgs struct {
	Args_ *PutAppendArgs_ `thrift:"args,1" frugal:"1,default,PutAppendArgs_" json:"args"`
}

func NewKonataServicePutAppendArgs() *KonataServicePutAppendArgs {
	return &KonataServicePutAppendArgs{}
}

func (p *KonataServicePutAppendArgs) InitDefault() {
	*p = KonataServicePutAppendArgs{}
}

var KonataServicePutAppendArgs_Args__DEFAULT *PutAppendArgs_

func (p *KonataServicePutAppendArgs) GetArgs_() (v *PutAppendArgs_) {
	if p == nil {
		return
	}
	if !p.IsSetArgs_() {
		return KonataServicePutAppendArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *KonataServicePutAppendArgs) SetArgs_(val *PutAppendArgs_) {
	p.Args_ = val
}

var fieldIDToName_KonataServicePutAppendArgs = map[int16]string{
	1: "args",
}

func (p *KonataServicePutAppendArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *KonataServicePutAppendArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KonataServicePutAppendArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KonataServicePutAppendArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Args_ = NewPutAppendArgs_()
	if err := p.Args_.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *KonataServicePutAppendArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutAppend_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KonataServicePutAppendArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("args", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Args_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *KonataServicePutAppendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KonataServicePutAppendArgs(%+v)", *p)

}

func (p *KonataServicePutAppendArgs) DeepEqual(ano *KonataServicePutAppendArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Args_) {
		return false
	}
	return true
}

func (p *KonataServicePutAppendArgs) Field1DeepEqual(src *PutAppendArgs_) bool {

	if !p.Args_.DeepEqual(src) {
		return false
	}
	return true
}

type KonataServicePutAppendResult struct {
	Success *Reply `thrift:"success,0,optional" frugal:"0,optional,Reply" json:"success,omitempty"`
}

func NewKonataServicePutAppendResult() *KonataServicePutAppendResult {
	return &KonataServicePutAppendResult{}
}

func (p *KonataServicePutAppendResult) InitDefault() {
	*p = KonataServicePutAppendResult{}
}

var KonataServicePutAppendResult_Success_DEFAULT *Reply

func (p *KonataServicePutAppendResult) GetSuccess() (v *Reply) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return KonataServicePutAppendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *KonataServicePutAppendResult) SetSuccess(x interface{}) {
	p.Success = x.(*Reply)
}

var fieldIDToName_KonataServicePutAppendResult = map[int16]string{
	0: "success",
}

func (p *KonataServicePutAppendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KonataServicePutAppendResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KonataServicePutAppendResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KonataServicePutAppendResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewReply()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *KonataServicePutAppendResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutAppend_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KonataServicePutAppendResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *KonataServicePutAppendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KonataServicePutAppendResult(%+v)", *p)

}

func (p *KonataServicePutAppendResult) DeepEqual(ano *KonataServicePutAppendResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *KonataServicePutAppendResult) Field0DeepEqual(src *Reply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type KonataServiceRemoveReqIdArgs struct {
	Args_ *GetArgs_ `thrift:"args,1" frugal:"1,default,GetArgs_" json:"args"`
}

func NewKonataServiceRemoveReqIdArgs() *KonataServiceRemoveReqIdArgs {
	return &KonataServiceRemoveReqIdArgs{}
}

func (p *KonataServiceRemoveReqIdArgs) InitDefault() {
	*p = KonataServiceRemoveReqIdArgs{}
}

var KonataServiceRemoveReqIdArgs_Args__DEFAULT *GetArgs_

func (p *KonataServiceRemoveReqIdArgs) GetArgs_() (v *GetArgs_) {
	if p == nil {
		return
	}
	if !p.IsSetArgs_() {
		return KonataServiceRemoveReqIdArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *KonataServiceRemoveReqIdArgs) SetArgs_(val *GetArgs_) {
	p.Args_ = val
}

var fieldIDToName_KonataServiceRemoveReqIdArgs = map[int16]string{
	1: "args",
}

func (p *KonataServiceRemoveReqIdArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *KonataServiceRemoveReqIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KonataServiceRemoveReqIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KonataServiceRemoveReqIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Args_ = NewGetArgs_()
	if err := p.Args_.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *KonataServiceRemoveReqIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RemoveReqId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KonataServiceRemoveReqIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("args", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Args_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *KonataServiceRemoveReqIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KonataServiceRemoveReqIdArgs(%+v)", *p)

}

func (p *KonataServiceRemoveReqIdArgs) DeepEqual(ano *KonataServiceRemoveReqIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Args_) {
		return false
	}
	return true
}

func (p *KonataServiceRemoveReqIdArgs) Field1DeepEqual(src *GetArgs_) bool {

	if !p.Args_.DeepEqual(src) {
		return false
	}
	return true
}

type KonataServiceRemoveReqIdResult struct {
	Success *Reply `thrift:"success,0,optional" frugal:"0,optional,Reply" json:"success,omitempty"`
}

func NewKonataServiceRemoveReqIdResult() *KonataServiceRemoveReqIdResult {
	return &KonataServiceRemoveReqIdResult{}
}

func (p *KonataServiceRemoveReqIdResult) InitDefault() {
	*p = KonataServiceRemoveReqIdResult{}
}

var KonataServiceRemoveReqIdResult_Success_DEFAULT *Reply

func (p *KonataServiceRemoveReqIdResult) GetSuccess() (v *Reply) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return KonataServiceRemoveReqIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *KonataServiceRemoveReqIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*Reply)
}

var fieldIDToName_KonataServiceRemoveReqIdResult = map[int16]string{
	0: "success",
}

func (p *KonataServiceRemoveReqIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KonataServiceRemoveReqIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KonataServiceRemoveReqIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KonataServiceRemoveReqIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewReply()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *KonataServiceRemoveReqIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RemoveReqId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KonataServiceRemoveReqIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *KonataServiceRemoveReqIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KonataServiceRemoveReqIdResult(%+v)", *p)

}

func (p *KonataServiceRemoveReqIdResult) DeepEqual(ano *KonataServiceRemoveReqIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *KonataServiceRemoveReqIdResult) Field0DeepEqual(src *Reply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
