// Code generated by Kitex v0.9.1. DO NOT EDIT.

package konataservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	konata_client "github.com/hhr12138/Konata-client/kitex_gen/db/raft/konata_client"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Get": kitex.NewMethodInfo(
		getHandler,
		newKonataServiceGetArgs,
		newKonataServiceGetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PutAppend": kitex.NewMethodInfo(
		putAppendHandler,
		newKonataServicePutAppendArgs,
		newKonataServicePutAppendResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RemoveReqId": kitex.NewMethodInfo(
		removeReqIdHandler,
		newKonataServiceRemoveReqIdArgs,
		newKonataServiceRemoveReqIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	konataServiceServiceInfo                = NewServiceInfo()
	konataServiceServiceInfoForClient       = NewServiceInfoForClient()
	konataServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return konataServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return konataServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return konataServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "KonataService"
	handlerType := (*konata_client.KonataService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "konata_client",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func getHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*konata_client.KonataServiceGetArgs)
	realResult := result.(*konata_client.KonataServiceGetResult)
	success, err := handler.(konata_client.KonataService).Get(ctx, realArg.Args_)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newKonataServiceGetArgs() interface{} {
	return konata_client.NewKonataServiceGetArgs()
}

func newKonataServiceGetResult() interface{} {
	return konata_client.NewKonataServiceGetResult()
}

func putAppendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*konata_client.KonataServicePutAppendArgs)
	realResult := result.(*konata_client.KonataServicePutAppendResult)
	success, err := handler.(konata_client.KonataService).PutAppend(ctx, realArg.Args_)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newKonataServicePutAppendArgs() interface{} {
	return konata_client.NewKonataServicePutAppendArgs()
}

func newKonataServicePutAppendResult() interface{} {
	return konata_client.NewKonataServicePutAppendResult()
}

func removeReqIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*konata_client.KonataServiceRemoveReqIdArgs)
	realResult := result.(*konata_client.KonataServiceRemoveReqIdResult)
	success, err := handler.(konata_client.KonataService).RemoveReqId(ctx, realArg.Args_)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newKonataServiceRemoveReqIdArgs() interface{} {
	return konata_client.NewKonataServiceRemoveReqIdArgs()
}

func newKonataServiceRemoveReqIdResult() interface{} {
	return konata_client.NewKonataServiceRemoveReqIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Get(ctx context.Context, args_ *konata_client.GetArgs_) (r *konata_client.Reply, err error) {
	var _args konata_client.KonataServiceGetArgs
	_args.Args_ = args_
	var _result konata_client.KonataServiceGetResult
	if err = p.c.Call(ctx, "Get", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PutAppend(ctx context.Context, args_ *konata_client.PutAppendArgs_) (r *konata_client.Reply, err error) {
	var _args konata_client.KonataServicePutAppendArgs
	_args.Args_ = args_
	var _result konata_client.KonataServicePutAppendResult
	if err = p.c.Call(ctx, "PutAppend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveReqId(ctx context.Context, args_ *konata_client.GetArgs_) (r *konata_client.Reply, err error) {
	var _args konata_client.KonataServiceRemoveReqIdArgs
	_args.Args_ = args_
	var _result konata_client.KonataServiceRemoveReqIdResult
	if err = p.c.Call(ctx, "RemoveReqId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
